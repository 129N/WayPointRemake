import { ThemedText } from '@/components/ThemedText';
import * as DocumentPicker from 'expo-document-picker';
import * as Location from 'expo-location';
import { XMLParser } from 'fast-xml-parser';
import React, { useEffect, useState } from 'react';
import { Button, Dimensions, ScrollView, StyleSheet, Text, View } from 'react-native';
import MapView, { Marker, Polyline } from 'react-native-maps';
import getBearing from '../comp/GPXfunction';
export default function GpxLoader() {


    const [coordinates, setCoordinates] = useState<{ latitude: number, longitude: number } | null>(null);
  const [trackPoints, setTrackPoints] = useState<any[]>([]);
  const [waypoints, setWaypoints] = useState<Waypoint[]>([]);
  const [mapReady, setMapReady] = useState(false);
  const [currentPosition, setCurrentPosition] = useState<Position | null>(null);
  const mapRef = React.useRef(null);
  const [fileUri, setFileUri] = useState<string | null>(null);

  const [region, setRegion] = useState({
    latitude: 46.928,
    longitude: 17.867,
    latitudeDelta: 0.05,
    longitudeDelta: 0.05,
  });

  type Waypoint = {
    name: string;
    latitude: number;
    longitude: number;
  }
  type Position = {
    latitude: number;
    longitude: number;
  };

  const pickFile = async () => {
    
    const result = await DocumentPicker.getDocumentAsync(
        { type: 'application/gpx+xml' });


    if (
      result.assets && result.assets.length > 0 &&
      result.assets[0].name.endsWith('.gpx'))
      {

        const fileUri = result.assets[0].uri;
       

        const parser = new XMLParser({
          ignoreAttributes: false,
          ignoreDeclaration: true,
          ignorePiTags: true,
        });


        const gpxText =  await fetch(fileUri).then(res => res.text());

        const parsed = parser.parse(gpxText);
        const parsedWaypoints = parsed.gpx.wpt;
        const trackPoints = parsed.gpx.trk.trkseg.trkpt;

        setWaypoints(parsedWaypoints);
      setTrackPoints(trackPoints);

      const formData = new FormData();
      formData.append('gpx_file', {
        uri: fileUri,
        type: 'application/gpx+xml',
        name: result.assets[0].name,
      } as any);

      
    } else {
       alert('The file uploading canceled');
  }

};


    const FESend = async () => {
      
      try {
        console.log('Preparing upload...');

        if (!fileUri) {
          alert('No file selected.');
          return;
        }

        const formData = new FormData();
      formData.append('gpx_file', {
        uri: fileUri,
        type: 'application/gpx+xml',
        name: 'NN_Ultrabalaton_2025.gpx',
      } as any);

      console.log('fileUri:', fileUri);

      formData.append('waypoints', JSON.stringify(waypoints));
      formData.append('trackPoints', JSON.stringify(trackPoints));

      console.log('FormData ready:');
        const response = await fetch('http://192.168.0.101:8000/api/upload-gpx',{
          method: 'POST',
          headers: {'Content-Type': 'multipart/form-data',},
          body: formData,
        });
        // Now send this data to the server
        //http://127.0.0.1:8000/api/upload-gpx
        //http://192.168.0.101:8000/api/upload-gpx
        //http://192.168.0.101:8000/api/upload-gpx

        console.log('Response received');

        const text = await response.text();
        console.log('Raw response:', text);

        if (response.ok){
          alert('GPX file uploaded successfully');
        } else {
          alert('Error uploading GPX file');
        }

  

        
      } catch(GPXERROR){
        console.error('Upload error:', GPXERROR);
        alert('Upload failed. Please check the file and server.');
      }

    }

   //calculate bearing to the next waypoint 
   const calculateBearingToNextWaypoint = () => {
    if(currentPosition && waypoints.length > 0){
      const nextWaypoint = waypoints[1];
      if (nextWaypoint) {
  

        const bearing = getBearing(
                  currentPosition.latitude,
                  currentPosition.longitude,
                  nextWaypoint.latitude,
                  nextWaypoint.longitude
                );
        return bearing;
      }
    }

    return 0;
  };

  useEffect( ()=>{
      const bearing = calculateBearingToNextWaypoint();
      console.log('Bearing:', bearing);
  }, [currentPosition, waypoints] );


  useEffect(() => {
        if (trackPoints.length > 0 ) {
          const first = trackPoints[0];
          setRegion({
            latitude: parseFloat(first['@_lat']),
            longitude: parseFloat(first['@_lon']),
             latitudeDelta: 0.05,
            longitudeDelta: 0.05,

          });
        }
      }, [trackPoints, mapReady]);


       // Update current position on map (simulate or get real position here)
  const updatePosition = async () => {
    // Simulate current position (e.g., GPS or mock data)

    const { status } = await Location.requestForegroundPermissionsAsync();
    if (status !== 'granted') {
      alert('Permission denied');
      return;
    }
    const location = await Location.getCurrentPositionAsync({});
    setCurrentPosition({
      latitude: location.coords.latitude,
      longitude: location.coords.longitude,
    });
  };

  useEffect(() => {
    updatePosition();
  }, []);


  return (
    <View style={styles.container}>

      <ThemedText type="subtitle">Here is the place to upload the GPX File</ThemedText>
      <Button title="Load GPX File" onPress={pickFile} />

      <ScrollView style={styles.dataContainer}>
        {trackPoints?.map((point, index) => (
          <Text key={index} style = {{color: 'white'}}>
            Lat: {point['@_lat']} | Lon: {point['@_lon']}
          </Text>
        ))}
      </ScrollView>


         {/* Render the MapView only if coordinates are available */}
         {coordinates ? (
              <MapView
                      ref={mapRef}
                      style={{ width: Dimensions.get('window').width, height: 400 }}
                      initialRegion={region}
                      onMapReady={() => setMapReady(true)}
                    >

        {trackPoints.length > 0 && (
          <Polyline
            coordinates={trackPoints.map((pt) => ({
              latitude: parseFloat(pt['@_lat']),
              longitude: parseFloat(pt['@_lon']),
            }))}
            strokeColor="#FF0000"
            strokeWidth={3}
          />
        )}


        {currentPosition && (
          <Marker coordinate={currentPosition} title="Current Position">
            {/* You can replace with an arrow icon */}
            <View style={{ width: 20, height: 20, backgroundColor: 'blue' }} />
          </Marker>
        )}
      </MapView>


 

         ) : (
          <ThemedText type="title">No GPX file loaded yet.</ThemedText>)}


          </View>
        );
      }
      




const styles = StyleSheet.create(
    {
        container: {
            padding: 20,
            flex: 1,
            outlineColor: 'white',
            justifyContent: 'center',
            alignItems: 'center',
    
          }, 
          dataContainer: {
            marginTop: 20,
            width: '100%',
            paddingHorizontal: 10,
            flex: 1,
          },
    });
