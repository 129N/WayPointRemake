import { ThemedText } from '@/components/ThemedText';
import * as DocumentPicker from 'expo-document-picker';
import { XMLParser } from 'fast-xml-parser';
import React, { useState } from 'react';
import { Button, ScrollView, StyleSheet, Text, View } from 'react-native';
import MapView, { Marker, Polyline } from 'react-native-maps';

import * as FileSystem from 'expo-file-system';


type Waypoint = {
  name: string;
  latitude: number;
  longitude: number;
}
type TrackPoint = {
  '@_lat': string;
  '@_lon': string;
};
const GPXLoader = () => {

  const [coordinates, setCoordinates] = useState<{ latitude: number, longitude: number } | null>(null);
  const [trackPoints, setTrackPoints] = useState<TrackPoint[]>([]);
  const [waypoints, setWaypoints] = useState<Waypoint[]>([]);
  const [fileUri, setFileUri] = useState<string | null>(null);

  // Function to pick and parse the GPX file
  const pickFile = async () => {
    try {
      const result = await DocumentPicker.getDocumentAsync({ type: 'application/gpx+xml' });

      // Check if a valid GPX file was selected
      if (
        result.assets && result.assets.length > 0 && 
        result.assets[0].name.endsWith('.gpx')
      ) 
      {
        const fileUri = result.assets[0].uri;
        setFileUri(fileUri); // Save it to state

        console.log('File URI:', fileUri);


        const gpxText = await fetch(fileUri).then(res => res.text());


       // Parse the GPX content
       const parser = new XMLParser({
        ignoreAttributes: false,
        ignoreDeclaration: true,
        ignorePiTags: true,
      });

      const parsedData = parser.parse(gpxText);

      // Extract waypoints and use the first one as the center point
      const waypoints = parsedData?.gpx?.wpt || [];
      const trackPoints = parsedData?.gpx?.trk?.trkseg?.trkpt || [];

      const parsedWaypoints: Waypoint[] = (waypoints || []).map((wpt: any) => ({
        name: wpt.name?.['#text'] || 'Unnamed',
        latitude: parseFloat(wpt['@_lat']),
        longitude: parseFloat(wpt['@_lon']),
      }));

      setWaypoints(parsedWaypoints);
      setTrackPoints(trackPoints);



      const formData = new FormData();
      formData.append('file', {
        uri: fileUri, // local file path
        name: 'NN_Ultrabalaton_2025.gpx',
        type: 'application/gpx+xml',
      }as any);

      // formData.append('waypoints', JSON.stringify(parsedWaypoints));
      // formData.append('trackPoints', JSON.stringify(trackPoints));
      //formData.append('parsedData', JSON.stringify(gpxText));

      // Send GPX text to backend API
      // http://<your-tunnel-url>/api/GPX-UPLOADED
    

        if (parsedWaypoints.length > 0) {
          const firstWaypoint = parsedWaypoints[0];
      
          setCoordinates({ latitude: firstWaypoint.latitude, longitude: firstWaypoint.longitude });
          alert('FE: The waypoint uploaded successfully!');
        } else {
          alert('No waypoints found in the GPX file.');
        }
      } 

    } catch (error) {
      console.error('Error picking file:', error);
      alert('Error picking the file. Please try again.');
    }
  };


  const BEPass = async () => {
    try{
      console.log('Preparing upload...');

        if (!fileUri) {
          alert('No file selected.');
          return;
        }



        const fileName = 'NN_Ultrabalaton_2025.gpx';
        const localUri = `${FileSystem.documentDirectory}${fileName}`;
        await FileSystem.copyAsync({
              from: fileUri,
              to: localUri,
            });


      const formData = new FormData();
      formData.append('file', {
        uri: localUri ,
        name: fileName,
        type: 'application/gpx+xml',
      } as any);

      console.log('fileUri:', fileUri);
      console.log('Final localUri:', localUri);
      console.log('FormData ready:');
      formData.append('waypoints', JSON.stringify(waypoints));
      formData.append('trackPoints', JSON.stringify(trackPoints));
     // console.log('waypoints:', JSON.stringify(waypoints, null, 2));
      console.log("Here is the end point of Waypoint");

      //http://192.168.0.101:8000/api/GPX-UPLOADED 
      //http://192.168.0.101:8000/api/GPX-UPLOADED
      //'http://192.168.0.105:8000/api/GPX-UPLOADED',
      //http://192.168.0.101:8000/api/GPX-UPLOADED

    console.log("Initiate fetching");

      const response = await fetch('http://192.168.0.101:8001/api/GPX-UPLOADED', {
      method: 'POST',
      body: formData,
    });

          console.log('Response received');
          const text = await response.text();
          console.log('Raw response:', text);
       //console.log('Status:', response.status);


        if (response.ok) {
          alert('Upload successful!');

          try {
            const result = JSON.parse(text);
            console.log(result);
          } catch (e) {
            console.error('Response is not valid JSON:', text);
          }

        } 
        else {
          alert('response.oerror Upload failed. Server error.');
        }
    }
    
    catch(jsonErr){
      console.error('Upload error:', jsonErr);
      alert('Server did not return valid JSON. Check Laravel logs.');
    }
  };

  return (
    <View style={styles.container}>
      <ThemedText type="subtitle">NEWfileloader</ThemedText>
      <Button title="Load GPX File" onPress={pickFile} />



      <ScrollView style={styles.dataContainer}>
                  {trackPoints?.map((point, index) => (
                    <Text key={index} style = {{color: 'blue'}}>
                      Lat: {point['@_lat']} | Lon: {point['@_lon']}
                    </Text>
                  ))}
      </ScrollView>
    

      {/* Render the MapView only if coordinates are available */}
      {coordinates ? (
        <MapView
          style={styles.map}
          initialRegion={{
            latitude: coordinates.latitude,
            longitude: coordinates.longitude,
            latitudeDelta: 0.05,
            longitudeDelta: 0.05,
          }}
        >
          <Button title="Upload to BE " onPress={BEPass} />

           {/* Render Polyline for the track points */}
           <Polyline
            coordinates={trackPoints.map((pt) => ({
              latitude: parseFloat(pt['@_lat']),
              longitude: parseFloat(pt['@_lon']),
            }))}
            strokeColor="#FF0000"  // Set the color of the polyline
            strokeWidth={3}  // Set the width of the polyline
          />

              {waypoints.map((waypoint, index) => (
                <Marker
                  key={index}
                  coordinate={{
                    latitude: waypoint.latitude,
                    longitude: waypoint.longitude,
                  }}
                  title={waypoint.name}
                  pinColor="blue"
                />
              ))}

        </MapView>

   

        
      ) : (
        <ThemedText type="title">No GPX file loaded yet.</ThemedText>
      )}




    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 20,
    flex: 1,
    outlineColor: 'white',
    justifyContent: 'center',
    alignItems: 'center',
  },
  map: {
    width: '100%',
    height: 300,
    marginTop: 20,
  },
  dataContainer: {
    marginTop: 20,
    width: '100%',
    paddingHorizontal: 10,
    flex: 1,
  },
});

export default GPXLoader;
