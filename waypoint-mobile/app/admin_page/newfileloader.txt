import { ThemedText } from '@/components/ThemedText';
import * as DocumentPicker from 'expo-document-picker';
import { XMLParser } from 'fast-xml-parser';
import React, { useState } from 'react';
import { Button, ScrollView, StyleSheet, Text, View } from 'react-native';
import MapView, { Marker, Polyline } from 'react-native-maps';

const GPXLoader = () => {
  const [coordinates, setCoordinates] = useState<{ latitude: number, longitude: number } | null>(null);
  const [trackPoints, setTrackPoints] = useState<any[]>([]);
  const [waypoints, setWaypoints] = useState<Waypoint[]>([]);



  type Waypoint = {
    name: string;
    latitude: number;
    longitude: number;
  }


  // Function to pick and parse the GPX file
  const pickFile = async () => {
    try {
      const result = await DocumentPicker.getDocumentAsync({ type: 'application/gpx+xml' });

      // Check if a valid GPX file was selected
      if (
        result.assets && result.assets.length > 0 && 
        result.assets[0].name.endsWith('.gpx')
      ) {
        const fileUri = result.assets[0].uri;
        console.log('File URI:', fileUri);


        // Read the file and parse the GPX content
        const fileContent = await fetch(fileUri).then(res => res.text());

        // Fetch the file content (just an example, you can use other methods to fetch it)
        const response = await fetch(fileUri);
        const gpxText = await response.text();

        // Parse the GPX content
       const parser = new XMLParser({
                   ignoreAttributes: false,
                   ignoreDeclaration: true,
                   ignorePiTags: true,
                 });


        const parsedData = parser.parse(gpxText);

        // Extract waypoints and use the first one as the center point
        const waypoints = parsedData.gpx.wpt;
        const trackPoints = parsedData.gpx.trk.trkseg.trkpt;


        //console.log('Waypoints:', waypoints);
        console.log('Track Points:', trackPoints);
        console.log('Waypoints:',  parsedData);
        console.log("The GPX file has been accepted.");

        const parsedWaypoints: Waypoint[] = (waypoints || []).map((wpt: any) => ({
          name: wpt.name?.['#text'] || 'Unnamed',
          latitude: parseFloat(wpt['@_lat']),
          longitude: parseFloat(wpt['@_lon']),
        }));


        setWaypoints(parsedWaypoints);
        
        setTrackPoints(trackPoints);
        //setWaypoints(parsedData);

        if (waypoints && waypoints.length > 0) {
          const firstWaypoint = waypoints[0];
          const latitude = parseFloat(firstWaypoint['@_lat']);
          const longitude = parseFloat(firstWaypoint['@_lon']);

          setCoordinates({ latitude, longitude });
        } else {
          alert('No waypoints found in the GPX file.');
        }
      } else {
        alert('Please select a valid GPX file.');
      }
    } catch (error) {
      console.error('Error picking file:', error);
      alert('Error picking the file. Please try again.');
    }
  };

  return (
    <View style={styles.container}>
      <ThemedText type="subtitle">Here is the place to upload the GPX File</ThemedText>
      <Button title="Load GPX File" onPress={pickFile} />



      <ScrollView style={styles.dataContainer}>
                  {trackPoints?.map((point, index) => (
                    <Text key={index} style = {{color: 'white'}}>
                      Lat: {point['@_lat']} | Lon: {point['@_lon']}
                    </Text>
                  ))}
      </ScrollView>


      {/* Render the MapView only if coordinates are available */}
      {coordinates ? (
        <MapView
          style={styles.map}
          initialRegion={{
            latitude: coordinates.latitude,
            longitude: coordinates.longitude,
            latitudeDelta: 0.05,
            longitudeDelta: 0.05,
          }}
        >

           {/* Render Polyline for the track points */}
           <Polyline
            coordinates={trackPoints.map((pt) => ({
              latitude: parseFloat(pt['@_lat']),
              longitude: parseFloat(pt['@_lon']),
            }))}
            strokeColor="#FF0000"  // Set the color of the polyline
            strokeWidth={3}  // Set the width of the polyline
          />

              {waypoints.map((waypoint, index) => (
                <Marker
                  key={index}
                  coordinate={{
                    latitude: waypoint.latitude,
                    longitude: waypoint.longitude,
                  }}
                  title={waypoint.name}
                  pinColor="blue"
                />
              ))}



        </MapView>

        
      ) : (
        <ThemedText type="title">No GPX file loaded yet.</ThemedText>
      )}




    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 20,
    flex: 1,
    outlineColor: 'white',
    justifyContent: 'center',
    alignItems: 'center',
  },
  map: {
    width: '100%',
    height: 300,
    marginTop: 20,
  },
  dataContainer: {
    marginTop: 20,
    width: '100%',
    paddingHorizontal: 10,
    flex: 1,
  },
});

export default GPXLoader;
