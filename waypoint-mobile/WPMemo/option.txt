Your Goal:
Upload the GPX file in newfileloader.tsx.

Then use the parsed waypoints from that GPX file inside WaypointsScreen.tsx.

✅ Three Reliable Ways to Do This
✅ 1. React Context (Best for App-wide Sharing)
Use a shared state across screens by creating a GPXContext.

GPXContext.tsx
tsx
Copy
Edit
import React, { createContext, useState, useContext } from 'react';

export type Waypoint = {
  name: string;
  latitude: number;
  longitude: number;
};

const GPXContext = createContext<{
  waypoints: Waypoint[];
  setWaypoints: React.Dispatch<React.SetStateAction<Waypoint[]>>;
}>({
  waypoints: [],
  setWaypoints: () => {},
});

export const GPXProvider = ({ children }) => {
  const [waypoints, setWaypoints] = useState<Waypoint[]>([]);
  return (
    <GPXContext.Provider value={{ waypoints, setWaypoints }}>
      {children}
    </GPXContext.Provider>
  );
};

export const useGPX = () => useContext(GPXContext);
Wrap your App:
tsx
Copy
Edit
// In App.tsx
import { GPXProvider } from './GPXContext';

export default function App() {
  return (
    <GPXProvider>
      <RootNavigation />
    </GPXProvider>
  );
}
In newfileloader.tsx:
tsx
Copy
Edit
import { useGPX } from './GPXContext';

const { setWaypoints } = useGPX();

// Once GPX is parsed:
setWaypoints(parsedWaypoints);
In WaypointsScreen.tsx:
tsx
Copy
Edit
import { useGPX } from './GPXContext';

const { waypoints } = useGPX();
✅ 2. React Navigation with Route Params (Simpler, but not persistent)
When navigating to WaypointsScreen, send the data:

tsx
Copy
Edit
router.push({
  pathname: '/waypoints',
  params: { waypoints: JSON.stringify(parsedWaypoints) },
});
And inside WaypointsScreen.tsx:

tsx
Copy
Edit
import { useLocalSearchParams } from 'expo-router';

const params = useLocalSearchParams();
const waypoints = JSON.parse(params.waypoints);
✅ 3. Store to Backend and Fetch (as you already do)
This is what you are doing now:

newfileloader.tsx uploads .gpx to backend.

WaypointsScreen.tsx fetches them from /api/waypoints.

✅ This works well and is robust — but if you want instant reaction between screens without a round-trip to the server, use Context (Method #1).


✅ Correct Flow Recap
1. Admin Uploads GPX in newfileloader.tsx
React Native sends GPX file to:

nginx
Copy
Edit
POST http://your-server/api/GPX-UPLOADED
Payload: FormData with file

✅ Confirm: console.log("Upload successful") and check server receives it (look in Laravel logs or debug)

2. Laravel receives and parses GPX
Inside Laravel controller:

php
Copy
Edit
public function upload(Request $request)
{
    if (!$request->hasFile('file')) {
        return response()->json(['error' => 'No valid GPX file received'], 400);
    }

    $file = $request->file('file');
    $gpx = simplexml_load_file($file->getRealPath());

    foreach ($gpx->trk->trkseg->trkpt as $pt) {
        Waypoint::create([
            'latitude' => (float)$pt['lat'],
            'longitude' => (float)$pt['lon'],
            'name' => (string)$pt->name ?? 'Waypoint',
        ]);
    }

    return response()->json(['message' => 'Waypoints stored']);
}
✅ Check your waypoints table after upload:

Run: php artisan tinker → \App\Models\Waypoint::all();

Or use DB viewer like TablePlus, phpMyAdmin, or Laravel Telescope

3. WaypointsScreen.tsx fetches from /api/waypoints
ts
Copy
Edit
useEffect(() => {
  fetch('http://your-server/api/waypoints')
    .then(res => res.json())
    .then(data => setWaypoints(data));
}, []);
This only works if Laravel successfully stored the waypoints in DB.

Test in browser or Postman:

nginx
Copy
Edit
GET http://your-server/api/waypoints
✅ Should return:

json
Copy
Edit
[
  { "latitude": ..., "longitude": ..., "name": "WP1" },
  ...
]

